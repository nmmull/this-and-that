#+TITLE: Explosives and Distinguishers
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="myStyle.css" />
#+OPTIONS: html-style:nil H:1 num:nil
#+HTML_LINK_HOME: index.html

/*Abstract.* TODO/ Testing

/Quick interjection:/ This piece contains (too) many proofs in [[https://docs.racket-lang.org/pie/index.html][Pie]], a simple, beautiful, but
verbose dependently typed programming language.  Before getting
Here's a small logical interface used throughout to make
proofs more readable:

#+begin_src lisp
  #lang pie

  (claim ⊥ U)
  (define ⊥ Absurd)

  (claim ⊤ U)
  (define ⊤ Trivial)

  (claim ¬ (→ U U))
  (define ¬ (λ (A) (→ A ⊥)))

  (claim ∧ (→ U U U))
  (define ∧ (λ (A B) (Pair A B)))

  (claim ∨ (→ U U U))
  (define ∨ (λ (A B) (Either A B)))

  (claim ↔ (→ U U U))
  (define ↔ (λ (A B) (∧ (→ A B) (→ B A))))

  (claim ≠ (Π ((A U)) (→ A A U)))
  (define ≠ (λ (A x y) (¬ (= A x y))))
#+end_src

/Interjection over./

I recently spent an inordinate amount of time thinking about [[https://docs.racket-lang.org/pie/index.html][Pie]]
formalizations of the following theorem:

#+begin_quote
/1 = 0 implies I am the Pope./
#+end_quote

I was interested primarily in proofs that could be carried out in the
minimal fragment of Pie, i.e., without the use of [[https://docs.racket-lang.org/pie/index.html#%28def._%28%28lib._pie%2Fmain..rkt%29._ind-.Absurd%29%29][~ind-Absurd~]], the
induction principle for the empty type which expresses the [[https://en.wikipedia.org/wiki/Principle_of_explosion][principle
of explosion]].

Thinking about this long enough leads invariably to a standard fact of
constructive mathematics: 1 = 0 is /explosive/ in the sense that
anything follows from it in the minimal fragment of Pie.[fn::See
Proposition 3.2 of Constructivism in Mathematics by Trolestra and van
Dalen.]

#+begin_src lisp
  (claim explode-1=0
    (→ (= Nat 1 0) (Π ((A U)) A)))
  (define explode-1=0
    (λ (1=0 A)
       (replace
         1=0
         (λ (a) (which-Nat a A (λ (_) ⊤)))
         sole)))
#+end_src

And thinking about for too long leads to a natural enough question:
/which equalities are explosive?/

* Distinguishers

Its straightforward to generalize the above proof to any fixed pair of
natural numbers.

#+begin_src
  (claim sub1 (→ Nat Nat))
  (define sub1
    (λ (n)
       (which-Nat n 0 (λ (n-1) n-1))))

  (claim ∸ (→ Nat Nat Nat))
  (define ∸
    (λ (m n)
       (iter-Nat n m sub1)))

  (claim 5=7→1=0
    (→ (= Nat 5 7) (= Nat 1 0)))
  (define 5=7→1=0
    (λ (5=7)
       (symm
         (cong
           5=7
  	 (the
  	   (→ Nat Nat)
  	   (λ (n) (∸ n 6)))))))

  (claim explode-5=7
    (→ (= Nat 5 7) (Π ((A U)) A)))
  (define explode-5=7
    (λ (5=7)
       (explode-1=0 (5=7→1=0 5=7))))
#+end_src

It also works for the equality true = false, given the standard sum
type encoding of Booleans.

#+begin_src lisp
  (claim Bool U)
  (define Bool (Either ⊤ ⊤))

  (claim true Bool)
  (define true (left sole))

  (claim false Bool)
  (define false (right sole))

  (claim ind-Bool
    (Π ((target Bool)
        (motive (→ Bool U))
        (true-case (motive true))
        (false-case (motive false)))
       (motive target)))
  (define ind-Bool
    (λ (target motive true-case false-case)
       (ind-Either
         target
         motive
         (λ (_) true-case)
         (λ (_) false-case))))

  (claim bool→nat (→ Bool Nat))
  (define bool→nat
    (λ (b) (ind-Bool b (λ (_) Nat) 1 0)))

  (claim true=false→1=0
    (→ (= Bool true false) (= Nat 1 0)))
  (define true=false→1=0
    (λ (true=false) (cong true=false bool→nat)))

  (claim explode-true=false
    (→ (= Bool true false) (Π ((A U)) A)))
  (define explode-true=false
    (λ (true=false)
       (explode-1=0 (true=false→1=0 true=false))))
#+end_src

All we're doing here is bootstrapping; if an equality implies that 1 =
0 then it's explosive.  This condition is a tad clunky, but it hints
at a definition: let's say boolean function 𝑓 : 𝐴 → Bool
/distinguishes/ two values 𝑎 and 𝑏 if 𝑓 𝑎 is true and 𝑓 𝑏 is false.
Let's also say 𝑎 and 𝑏 are /distinguishable/, written 𝑎 ◇ 𝑏, if there
is a distinguisher for them.

#+begin_src lisp
  (claim Distinguishes
    (Π ((A U)
        (f (→ A Bool)))
       (→ A A U)))
  (define Distinguishes
    (λ (_ f x y)
       (∧ (= Bool (f x) true)
          (= Bool (f y) false))))

  (claim ◇
    (Π ((A U))
       (→ A A U)))
  (define ◇
    (λ (A x y)
       (Σ ((f (→ A Bool)))
          (Distinguishes A f x y))))

  ; the following are getters for ◇

  (claim distinguisher-◇
    (Π ((A U)
        (x A)
        (y A)
        (x◇y (◇ A x y)))
       (→ A Bool)))
  (define distinguisher-◇
    (λ (_ _ _ x◇y)
       (car x◇y)))

  (claim distinguishes-fst
    (Π ((A U)
        (x A)
        (y A)
        (x◇y (◇ A x y)))
       (= Bool
          (distinguisher-◇ A x y x◇y x)
          true)))
  (define distinguishes-fst
    (λ (_ _ _ x◇y)
       (car (cdr x◇y))))

  (claim distinguishes-snd
    (Π ((A U)
        (x A)
        (y A)
        (x◇y (◇ A x y)))
       (= Bool
          (distinguisher-◇ A x y x◇y y)
          false)))
  (define distinguishes-snd
    (λ (_ _ _ x◇y)
       (cdr (cdr x◇y))))
#+end_src

Being distinguishable captures more generally what's going on in the
case of 5 = 7 and true = false.

#+begin_src lisp
  (claim ◇→explode⁼
    (Π ((A U)
        (x A)
        (y A))
       (→ (◇ A x y)
          (= A x y)
          (Π ((B U)) B))))
  (define ◇→explode⁼
    (λ (A x y x◇y x=y)
      (explode-true=false
        (trans
          ; true = f x
          (symm (distinguishes-fst A x y x◇y))
          (trans
            ; f x = f y
            (cong x=y (distinguisher-◇ A x y x◇y))
            ; f y = false
            (distinguishes-snd A x y x◇y))))))
#+end_src

In other words, /any equality of distinguishable terms is explosive./

* Inequality

Being distinguishable is a strictly stronger relation than inquality
in the minimal fragment of Pie.[fn::Moving forward, we'll take
advantage of the fact that the principle of explosion is not a theorem
in the minimal fragment of Pie: to show that any other claim is not a
theorem, it suffices to show that it implies explosion.]

#+begin_src lisp
  (claim ◇→≠
    (Π ((A U)
        (x A)
        (y A))
       (→ (◇ A x y)
          (≠ A x y))))
  (define ◇→≠
    (λ (A x y x◇y x=y)
       (◇→explode⁼ A x y x◇y x=y ⊥)))

  (claim ⟨≠→◇⟩→ind-⊥
    (→ (Π ((A U)
           (x A)
           (y A))
          (→ (≠ A x y)
             (◇ A x y)))
       (→ ⊥ Π ((A U)) A))))
  (define ⟨≠→◇⟩→ind-⊥
    (λ (≠→◇ absurd)
       (◇→explode⁼
         ⊤
         sole
         sole
         (≠→◇
           ⊤
  	 sole
  	 sole
  	 (λ (_) absurd))
         (same sole))))
#+end_src

The principle ≠→◇ has the flavor of many well-studied semi-classical
principles: it expresses the ability to extract something constructive
from a negation proof.[fn::See, for example, Proposition 2.1.1 in
[[https://arxiv.org/abs/1804.05495][Constructive Reverse Mathematics]] by Hannes Diener. Actually, just read
the whole thing, it's very good.]  So it's not surprising that we
can't prove ≠→◇ in Pie[fn::Said another way, we can't prove ind-⊥→≠→◇
in the minimal fragment of Pie.] but we also can't disprove it.  This
is because ≠→◇ is a theorem in the classical extension of Pie (which
is consistent).

That ≠→◇ holds classically is not immediately obivous, but becomes
more clear through the lens of /decidable equality/.  In Pie, *if 𝐴
admits decidable equality, then unequal values of type 𝐴 are
distinguishable.*

And how does /that/ work?  This is also not immediately obvious.  It's
easy to forget that decidability, though core to constructive type
theory, has its origins in computability theory.

* Decidability

A type 𝐴 admits *decidable equality* if for any two values 𝑎₁ and 𝑎₂
of type 𝐴, we have 𝑎₁ = 𝑎₂ or 𝑎₁ ≠ 𝑎₂.  This can be seen as a
restriction of the law of excluded middle, so all types admit
decidable equality in the classical extension of Pie.

The computability theoretic notion of decidability is slightly
different: a predicate 𝑃 is *decidable* if there is a computable
function 𝑓 such that 𝑓(𝑥) = 1 if and only if 𝑃(𝑥) holds.

/How do these two notions correspond?/ Answering this question
requires putting on our Curry-Howard glasses: a term 𝑓 of type

#+begin_quote
~(Π ((x A) (y A)) (∨ (= 𝐴 𝑎₁ 𝑎₂) (≠ 𝐴 𝑎₁ 𝑎₁)))~
#+end_quote

on the one hand is a prove that 𝐴 admits decidable equality.  On the
other hand, it's a /computable function/ where (𝑓 𝑎 𝑏) evaluates to a
left term if 𝑎 = 𝑏 and a right term otherwise.  Since we can determine
leftness versus rightness programmatically, the term 𝑓 can be made a
decider for equality in the computability theoretic sense.

We'll formalize this observation, but first, a bit more on the general
framework of decidability.  A type 𝐴 (viewed through the Curry-Howard
lens) is *decidable* if either 𝐴 or ¬𝐴 holds.  The law of excluded
middle is equivalent to every type being decidable.  We can lift this
notion of decidability to binary predicates, but if we want to use
those predicates in their Curried form, we'll need to uncurry when
reasoning about their decidability.

#+begin_src
(claim Dec (→ U U))
(define Dec
  (λ (A) (∨ A (¬ A))))

(claim Decᴾ
  (Π ((A U)
      (P (→ A U)))
     U))
(define Decᴾ
  (λ (A P)
     (Π ((x A)) (Dec (P x)))))

(claim Uncurryᴾ
  (Π ((A U)
      (B U)
      (P (→ A B U)))
     (→ (Pair A B) U)))
(define Uncurryᴾ
  (λ (_ _ P p)
     (P (car p) (cdr p))))

(claim Decᴾ²
  (Π ((A U)
      (B U)
      (P (→ A B U)))
     U))
(define Decᴾ²
  (λ (A B P)
     (Decᴾ (Pair A B) (Uncurryᴾ A B P))))

(claim Dec⁼ (→ U U))
(define Dec⁼
  (λ (A)
     (Decᴾ²
       A
       A
       (λ (x y) (= A x y)))))
#+end_src

We express the computability theoretic notion of decidability as
having a decider, i.e., a function that witnesses the truth value of
the predicate (we'll use ~true~ and ~false~ instead of ~1~ and ~0~).

#+begin_src
(claim Decides
  (Π ((A U)
      (f (→ A Bool))
      (P (→ A U)))
     U))
(define Decides
  (λ (A f P)
     (Π ((x A))
        (↔ (P x)
	   (= Bool (f x) true)))))

(claim Decider
  (Π ((A U)
      (P (→ A U)))
     U))
(define Decider
  (λ (A P)
     (Σ ((f (→ A Bool)))
        (Decides A f P))))

(claim uncurry
  (Π ((A U)
      (B U)
      (C U))
     (→ (→ A B C)
        (→ (Pair A B) C))))
(define uncurry
  (λ (_ _ _ f p)
     (f (car p) (cdr p))))

(claim Decides₂
  (Π ((A U)
      (B U)
      (f (→ A B Bool))
      (P (→ A B U)))
     U))
(define Decides₂
  (λ (A B f P)
     (Decides
       (Pair A B)
       (uncurry A B Bool f)
       (Uncurryᴾ A B P))))

(claim Decider₂
  (Π ((A U)
      (B U)
      (P (→ A B U)))
     U))
(define Decider₂
  (λ (A B P)
     (Σ ((f (→ A B Bool)))
        (Decides₂ A B f P))))

(claim Decides⁼
  (Π ((A U)
      (f (→ A A Bool)))
     U))
(define Decides⁼
  (λ (A f)
     (Decides₂
       A
       A
       f
       (λ (x y) (= A x y)))))

(claim Decider⁼ (→ U U))
(define Decider⁼
  (λ (A)
     (Σ ((f (→ A A Bool)))
        (Decides⁼ A f))))
#+end_src

As noted above, types that admit decidable equalities have an
"obvious" decider, i.e., the one encoded in the proof of decidability.

#+begin_src
(claim left?
  (Π ((A U)
      (B U))
     (→ (Either A B)
        Bool)))
(define left?
  (λ (_ _ e)
     (ind-Either
       e
       (λ (_) Bool)
       (λ (_) true)
       (λ (_) false))))

(claim ?
  (Π ((A U)
      (P (→ A U)))
     (→ (Decᴾ A P) A Bool)))
(define ?
  (λ (_ P decᴾ x)
     (left?
       (P x)
       (¬ (P x))
       (decᴾ x))))

(claim ?₂
  (Π ((A U)
      (B U)
      (P (→ A B U))
      (decᴾ² (Decᴾ² A B P)))
     (→ A B Bool)))
(define ?₂
  (λ (A B P decᴾ² x y)
     (?
       (Pair A B)
       (Uncurryᴾ A B P)
       decᴾ²
       (cons x y))))

(claim ≟
  (Π ((A U))
     (→ (Dec⁼ A) A A Bool)))
(define ≟
  (λ (A) (?₂ A A (λ (x y) (= A x y)))))
#+end_src

We can convert the equality decider into an /distinguisher/ by
partially applying it: if (𝑓 𝑎 𝑏) is true if and only if 𝑎 = 𝑏, then
((𝑓 𝑎) 𝑥) is true if 𝑥 = 𝑎 and false otherwise.  But the fact that
this holds depends crucially on the principle of explosion.

#+begin_src lisp
(claim ind-⊥→dec⁼→≠→◇
  (→ (→ ⊥ (Π ((A U)) A))
     (Π ((A U)
         (dec⁼ (Dec⁼ A))
         (x A)
         (y A))
        (→ (≠ A x y) (◇ A x y)))))
(define ind-⊥→dec⁼→≠→◇
  (λ (ind-⊥ A dec⁼ x y x≠y)
     (cons
       (≟ A dec⁼ x)
       (cons
         (ind-Either
	   (dec⁼ (cons x x))
	   (λ (e)
	      (= Bool
	         (left?
		   (= A x x)
		   (≠ A x x)
		   e)
		 true))
           (λ (_) (same true))
	   (λ (x≠x)
	      (ind-⊥
	        (x≠x (same x))
	        (= Bool false true))))
	 (ind-Either
	   (dec⁼ (cons x y))
	   (λ (e)
	      (= Bool
	         (left?
		   (= A x y)
		   (≠ A x y)
		   e)
		 false))
            (λ (x=y) (ind-⊥ (x≠y x=y) (= Bool true false)))
	    (λ (_) (same false)))))))

(claim ⟨dec⁼→≠→◇⟩→ind-⊥
  (→ (Π ((A U)
         (dec⁼ (Dec⁼ A))
         (x A)
         (y A))
        (→ (≠ A x y) (◇ A x y)))
     (→ ⊥ (Π ((A U)) A))))
(define ⟨dec⁼→≠→◇⟩→ind-⊥
  (λ (dec⁼→≠→◇ absurd)
     (◇→explode⁼
       ⊤
       sole
       sole
       (dec⁼→≠→◇
         ⊤
         (λ (_) (right (λ (_) absurd)))
         sole
         sole
         ; artificial negation proof
         (λ (_) absurd))
       (same sole))))
#+end_src

Another theme is made visible here: in almost all cases, the ~Trivial~
type is sufficient to find a counterexample in the minimal fragment
Pie of a given principle.  And usually this comes down to an
artificial proof of a negation using our ~Absurd~ assumption (see
above).

As a corollary, we can prove ≠→◇ in the classical and constructive
(i.e., vanilla Pie) settings.

#+begin_src lisp
  (claim dec⁼→≠→◇
    (Π ((A U)
        (dec⁼ (Dec⁼ A))
        (x A)
        (y A))
       (→ (≠ A x y) (◇ A x y))))
  (define dec⁼→≠→◇
    (λ (A dec⁼ x y x≠y)
       (ind-⊥→dec⁼→≠→◇
         ; explicit use of ind-Absurd
         (λ (absurd A) (ind-Absurd absurd A))
         A
         dec⁼
         x
         y
         x≠y)))

  ; postulating the law of excluded middle
  (claim lem (Π ((A U)) (∨ A (¬ A))))
  (define lem TODO)

  (claim ≠→◇-classical
    (Π ((A U)
        (x A)
        (y A))
       (→ (≠ A x y) (◇ A x y))))
  (define ≠→◇-classical
    (λ (A x y x≠y)
       (dec⁼→≠→◇
         A
         (λ (p) (lem (= A (car p) (cdr p))))
         x
         y
         x≠y)))
#+end_src

* Deciders

But what about the minimal fragment?  We can't prove ≠→◇ from
decidable equality, but we also can't even prove that the obvious
decider is /actually/ a decider.  In minimal Pie, having a decider (in
the sense that the obvious decider is, in fact, a decider) is a
stronger condition than admitting decidable equality.

One direction is easy: if a predicate 𝑃 has a decider, then it's
decidable.  The proof: given 𝑥, ask the decider if 𝑃(𝑥) or ¬𝑃(𝑥).  We
break the proof up into two parts because working with Σ-types in Pie
isn't so ergonomic.

#+begin_src
(claim decides→decᴾ-helper
  (Π ((A U)
      (f (→ A Bool))
      (P (→ A U))
      (x A))
     (→ (↔ (P x) (= Bool (f x) true))
        (Dec (P x)))))
(define decides→decᴾ-helper
  (λ (_ f P x)
     (ind-Bool
       (f x)
       (λ (b)
          (→ (↔ (P x) (= Bool b true))
	     (Dec (P x))))
       (λ (prf)
          (left ((cdr prf) (same true))))
       (λ (prf)
          (right
	    (λ (px)
	       (true≠false
	         (symm ((car prf) px)))))))))

(claim decider→decᴾ
  (Π ((A U)
      (P (→ A U)))
     (→ (Decider A P)
        (Decᴾ A P))))
(define decider→decᴾ
  (λ (A P decider x)
     (decides→decᴾ-helper
       A
       (car decider)
       P
       x
       ((cdr decider) x))))
#+end_src

The more difficult direction is to show that if 𝑃 is decidable then it
has a decider.  Though difficult is not quite right.  The proof is
very natural: the obvious decider for 𝑃 is a decider. But within the
minimal fragment, we can't prove this.

Let's break this into two observations: within the minimal fragment,
if we know the value of the obvious decider on 𝑎, then we /can/ derive
proofs of the 𝑃(𝑎) or ¬𝑃(𝑎), depending on that value.

#+begin_src
(claim p?=true→p
  (Π ((A U)
      (P (→ A U))
      (decᴾ (Decᴾ A P))
      (x A))
     (→ (= Bool (? A P decᴾ x) true)
        (P x))))
(define p?=true→p
  (λ (_ P decᴾ x)
     (ind-Either
       (decᴾ x)
       (λ (e)
          (→ (= Bool
	        (left? (P x) (¬ (P x)) e)
	        true)
             (P x)))
       (λ (px _) px)
       (λ (_ false=true)
          (explode-true=false
	    (symm false=true)
	    (P x))))))

(claim p?=false→¬p
  (Π ((A U)
      (P (→ A U))
      (decᴾ (Decᴾ A P))
      (x A))
     (→ (= Bool
           (? A P decᴾ x)
	   false)
        (¬ (P x)))))
(define p?=false→¬p
  (λ (_ P decᴾ x)
     (ind-Either
       (decᴾ x)
       (λ (e)
          (→ (= Bool
	        (left? (P x) (¬ (P x)) e)
		false)
             (¬ (P x))))
       (λ (_ true=false)
          (explode-true=false
	    true=false
	    (¬ (P x))))
       (λ (¬px _) ¬px))))
#+end_src

What we /can't/ do within the minimal fragment is determine the value
of the decider itself given 𝑃(𝑎) or ¬𝑃(𝑎), e.g., 𝑃(𝑎) implies the
equality (? 𝑃 𝑎) = true given the principle of explosion, but this
implication also /implies/ the principle of explosion.  This
ultimately comes down to the fact that there isn't much we can do in
the ¬𝑃(𝑎) branch of the decidability of 𝑃 except explode it with our
assumption 𝑃(𝑎).

#+begin_src lisp
(claim ind-⊥→p→p?=true
  (→ (→ ⊥ (Π ((A U)) A))
     (Π ((A U)
         (P (→ A U))
	 (decᴾ (Decᴾ A P))
	 (x A))
	(→ (P x)
	   (= Bool
	      (? A P decᴾ x)
	      true)))))
(define ind-⊥→p→p?=true
  (λ (ind-⊥ _ P decᴾ x px)
     (ind-Either
       (decᴾ x)
       (λ (e)
          (= Bool
	     (left? (P x) (¬ (P x)) e)
	     true))
       (λ (_) (same true))
       (λ (¬px)
          (ind-⊥→explode
	    ind-⊥
	    (P x)
            ¬px
	    px
	    (= Bool false true))))))

(claim ⟨p→p?=true⟩→ind-⊥
  (→ (Π ((A U)
         (P (→ A U))
	 (decᴾ (Decᴾ A P))
	 (x A))
	(→ (P x)
	   (= Bool
	      (? A P decᴾ x)
	      true)))
     (→ ⊥ (Π ((A U)) A))))
(define ⟨p→p?=true⟩→ind-⊥
  (λ (p→p?=true absurd)
     (explode-true=false
       (symm
         (p→p?=true
           ⊤
           (λ (_) ⊤)
           (λ (_) (right (λ (_) absurd)))
           sole
           sole)))))

(claim ind-⊥→¬p→p?=false
  (→ (→ ⊥ (Π ((A U)) A))
     (Π ((A U)
         (P (→ A U))
	 (decᴾ (Decᴾ A P))
	 (x A))
	(→ (¬ (P x))
	   (= Bool
	      (? A P decᴾ x)
	      false)))))
(define ind-⊥→¬p→p?=false
  (λ (ind-⊥ _ P decᴾ x ¬px)
     (ind-Either
       (decᴾ x)
       (λ (e)
          (= Bool
	     (left? (P x) (¬ (P x)) e)
	     false))
       (λ (px)
          (ind-⊥→explode
	    ind-⊥
	    (P x)
	    ¬px
	    px
	    (= Bool true false)))
       (λ (_) (same false)))))

(claim ⟨¬p→p?=false⟩→ind-⊥
  (→ (Π ((A U)
         (P (→ A U))
	 (decᴾ (Decᴾ A P))
	 (x A))
	(→ (¬ (P x))
	   (= Bool
	      (? A P decᴾ x)
	      false)))
     (→ ⊥ (Π ((A U)) A))))
(define ⟨¬p→p?=false⟩→ind-⊥
  (λ (¬p→p?=false absurd)
     (explode-true=false
       (¬p→p?=false
         ⊤
	 (λ (_) ⊥)
	 (λ (_) (left absurd))
	 sole
	 (λ (absurd) absurd)))))
#+end_src

This inability to determine the value of the decider implies our
inability to prove that the obvious decider decides.

#+begin_src
(claim ind-⊥→decᴾ→decides
  (→ (→ ⊥ (Π ((A U)) A))
     (Π ((A U)
         (P (→ A U))
	 (decᴾ (Decᴾ A P)))
	(Decides A (? A P decᴾ) P))))
(define ind-⊥→decᴾ→decides
  (λ (ind-absurd A P decᴾ x)
     (cons
       (ind-⊥→p→p?=true
         ind-absurd
	 A
	 P
	 decᴾ
	 x)
       (p?=true→p
         A
	 P
	 decᴾ
	 x))))

(claim ind-⊥→decᴾ→decider
  (→ (→ ⊥ (Π ((A U)) A))
     (Π ((A U)
         (P (→ A U))
	 (decᴾ (Decᴾ A P)))
	(Decider A P))))
(define ind-⊥→decᴾ→decider
  (λ (ind-⊥ A P decᴾ)
     (cons
       (? A P decᴾ)
       (ind-⊥→decᴾ→decides
         ind-⊥
	 A
	 P
	 decᴾ))))

(claim ⟨decᴾ→decides⟩→ind-⊥
  (→ (Π ((A U)
         (P (→ A U))
	 (decᴾ (Decᴾ A P)))
	(Decides A (? A P decᴾ) P))
     (→ ⊥ (Π ((A U)) A))))
(define ⟨decᴾ→decides⟩→ind-⊥
  (λ (decᴾ→decides absurd)
     (explode-true=false
       (symm
         ((car
	    ((decᴾ→decides
	       ⊤
	       (λ (_) ⊤)
	       (λ (_) (right (λ (_) absurd))))
	      sole))
	    sole)))))
#+end_src

But, alas, even though having a decider is stronger condition in
minimal Pie, it's not sufficient to distinguish unequals.

#+begin_src
(claim ⟨decider⁼→≠→◇⟩→ind-⊥
  (→ (Π ((A U)
         (decider⁼ (Decider⁼ A))
	 (x A)
	 (y A))
	(→ (≠ A x y) (◇ A x y)))
     (→ ⊥ (Π ((A U)) A))))
(define ⟨decider⁼→≠→◇⟩→ind-⊥
  (λ (decider⁼→≠→◇ absurd)
     (◇→explode⁼
       Trivial
       sole
       sole
       (decider⁼→≠→◇
         Trivial
	 (cons
	   (λ (_ _) true)
	   (λ (p)
  	     (cons
  	       (λ (_) (same true))
  	       (λ (_) (same sole)))))
	 sole
	 sole
	 (λ (_) absurd))
       (same sole))))
#+end_src

So our quest continues.

* Distinguishability

But first, a side quest. Let's consider another definition, one that
seems promising.  We'll say that a type admits *complete distinguishability* if
all of its values are equal or distinguishable.

#+begin_src
(claim Distinguishability (→ U U))
(define Distinguishability
  (λ (A)
     (Π ((x A)
         (y A))
	(∨ (= A x y)
	   (◇ A x y)))))
#+end_src

It shouldn't be too surprising that having an equality decider is
equivalent to admitting complete distinguishability in Pie because of
◇→≠.  What's surprising (at least to me) is that this also holds in
minimal Pie, i.e., our ability to use construct an equality decider
from complete distinguishability does not depend on the principle
explosion.  In this sense, complete distinguishability is the
"correct" lowering of decidable equality into the minimal fragment so
if we want to be able to derive equality deciders.

As usual, one direction is easier than the other. If we have an
equality decider, we can use to distinguish unequals.

#+begin_src
(claim =true∨=false
  (Π ((b Bool))
     (∨ (= Bool b true)
        (= Bool b false))))
(define =true∨=false
  (λ (b)
     (ind-Bool
       b
       (λ (b)
          (∨ (= Bool b true)
             (= Bool b false)))
      (left (same true))
      (right (same false)))))

(claim decider⁼→dist
  (Π ((A U))
     (→ (Decider⁼ A)
        (Distinguishability A))))
(define decider⁼→dist
  (λ (A decider⁼ x y)
     (ind-Either
       (=true∨=false ((car decider⁼) x y))
       (λ (_)
          (∨ (= A x y)
	     (◇ A x y)))
       (λ (fxy=true)
          (left
	    ((cdr ((cdr decider⁼) (cons x y))) fxy=true)))
       (λ (fxy=false)
          (right
	    (cons
	      ((car decider⁼) x)
	      (cons
	        ((car ((cdr decider⁼) (cons x x))) (same x))
		fxy=false)))))))
#+end_src

To prove that complete distinguishability implies a we can construct a
decider, it will be convenient to hand roll a new decider, the
analogous obvious decider for complete distinguishability.  We can
this prove that this decider is, in fact, a decider by taking
advantange of the distinguishability proof, which we can leverage to
avoid using explosion.

#+begin_src
(claim ==
  (Π ((A U))
     (→ (Distinguishability A) A A Bool)))
(define ==
  (λ (A dist x y)
     (left?
       (= A x y)
       (◇ A x y)
       (dist x y))))

(claim dist→=→==true
  (Π ((A U)
      (dist (Distinguishability A))
      (x A)
      (y A))
     (→ (= A x y)
        (= Bool
	   (== A dist x y)
	   true))))
(define dist→=→==true
  (λ (A dist x y x=y)
     (replace
       x=y
       (λ (a)
          (= Bool
	     (== A dist x a)
	     true))
       (ind-Either
         (dist x x)
	 (λ (e)
	    (= Bool
	       (left?
	         (= A x x)
		 (◇ A x x)
		 e)
	       true))
	 (λ (_) (same true))
	 (λ (x◇x)
	    (trans
	      ; false = f x
	      (symm (cdr (cdr x◇x)))
	      ; f x = true
	      (car (cdr x◇x))))))))

(claim dist→==true→=
  (Π ((A U)
      (dist (Distinguishability A))
      (x A)
      (y A))
     (→ (= Bool
	   (== A dist x y)
	   true)
	(= A x y))))
(define dist→==true→=
  (λ (A dist x y)
     (ind-Either
       (dist x y)
       (λ (e)
          (→ (= Bool
	       (left?
	         (= A x y)
	         (◇ A x y)
	         e)
	       true)
	     (= A x y)))
       (λ (x=y _) x=y)
       (λ (_ false=true)
          (explode-true=false
	    (symm false=true)
	    (= A x y))))))

(claim dist→decider⁼
  (Π ((A U))
     (→ (Distinguishability A)
        (Decider⁼ A))))
(define dist→decider⁼
  (λ (A dist)
     (cons
       (== A dist)
       (λ (p)
          (cons
            (dist→=→==true A dist (car p) (cdr p))
            (dist→==true→= A dist (car p) (cdr p)))))))
#+end_src

This, of course, gets us nowhere on our quest to find a condition that
allows use to distinguish unequals, but its a digression through which
I couldn't help but take a detour.

* Strong Deciders

There are probably a couple other intermediate definitions we could
look at, but let's get to the punchline.  Looking back, our inability
use the obvious equality decider in minimal Pie came from our
inability to derive equalities for the output values of the decider.
A minimal definition of deciability should give us this power so we
don't need to appeal to explosion.

We'll say that a function 𝑓 is a *strong decider* for the predicate 𝑃
if (𝑃 𝑎) implies (𝑓 𝑎) = true and ¬(𝑃 𝑎) implies (𝑓 𝑎) = false.

#+begin_src
(claim Strong-Decides
  (Π ((A U)
      (f (→ A Bool))
      (P (→ A U)))
     U))
(define Strong-Decides
  (λ (A f P)
     (Π ((x A))
        (∧ (→ (P x) (= Bool (f x) true))
           (→ (¬ (P x)) (= Bool (f x) false))))))

(claim Strong-Decider
  (Π ((A U)
      (P (→ A U)))
     U))
(define Strong-Decider
  (λ (A P)
     (Σ ((f (→ A Bool)))
        (Strong-Decides A f P))))

(claim Strong-Decides₂
  (Π ((A U)
      (B U)
      (f (→ A B Bool))
      (P (→ A B U)))
     U))
(define Strong-Decides₂
  (λ (A B f P)
     (Strong-Decides
       (Pair A B)
       (uncurry A B Bool f)
       (Uncurryᴾ A B P))))

(claim Strong-Decider₂
  (Π ((A U)
      (B U)
      (P (→ A B U)))
     U))
(define Strong-Decider₂
  (λ (A B P)
     (Σ ((f (→ A B Bool)))
        (Strong-Decides₂ A B f P))))

(claim Strong-Decides⁼
  (Π ((A U)
      (f (→ A A Bool)))
     U))
(define Strong-Decides⁼
  (λ (A f)
     (Strong-Decides₂
       A
       A
       f
       (λ (x y) (= A x y)))))

(claim Strong-Decider⁼ (→ U U))
(define Strong-Decider⁼
  (λ (A)
     (Σ ((f (→ A A Bool)))
        (Strong-Decides⁼ A f))))
#+end_src

Having a strong decider is equivalent to having a decider in vanilla
Pie, but we can see the "stress" this new definition puts on the
minimal fragment.  The only thing that blocks the equivalence in
minimal Pie is our inability to prove that a Boolean value that not
true is false.  It may be worth noting that this principle has
similarities to semi-classical principles like the [[https://en.wikipedia.org/wiki/Limited_principle_of_omniscience][Limited Principle
of Omnipotence]].

#+begin_src
(claim ind-⊥→≠true→=false
  (→ (→ ⊥ (Π ((A U)) A))
     (Π ((b Bool))
        (→ (≠ Bool b true)
	   (= Bool b false)))))
(define ind-⊥→≠true→=false
  (λ (ind-⊥ b b≠true)
     (ind-Either
       (=true∨=false b)
       (λ (_) (= Bool b false))
       (λ (b=true)
          (ind-⊥
	    (b≠true b=true)
	    (= Bool b false)))
       (λ (b=false) b=false))))

(claim ⟨≠true→=false⟩→ind-⊥
  (→ (Π ((b Bool))
        (→ (≠ Bool b true)
	   (= Bool b false)))
     (→ ⊥ (Π ((A U)) A))))
(define ⟨≠true→=false⟩→ind-⊥
  (λ (≠true→=false absurd)
     (explode-true=false
       (≠true→=false
         true
	 (λ (_) absurd)))))

(claim ind-⊥→decides⁼→strong-decides⁼
  (→ (→ ⊥ (Π ((A U)) A))
     (Π ((A U)
         (f (→ A A Bool)))
        (→ (Decides⁼ A f)
           (Strong-Decides⁼ A f)))))
(define ind-⊥→decides⁼→strong-decides⁼
  (λ (ind-⊥ A f decides⁼ p)
     (cons
       (car (decides⁼ p))
       (λ (x≠y)
          (ind-⊥→≠true→=false
            ind-⊥
            (f (car p) (cdr p))
            (λ (fxy=true)
               (x≠y ((cdr (decides⁼ p)) fxy=true))))))))

(claim ⟨decides⁼→strong-decides⁼⟩→ind-⊥
  (→ (Π ((A U)
         (f (→ A A Bool)))
        (→ (Decides⁼ A f)
           (Strong-Decides⁼ A f)))
     (→ ⊥ (Π ((A U)) A))))
(define ⟨decides⁼→strong-decides⁼⟩→ind-⊥
  (λ (decides⁼→strong-decides⁼ absurd)
     (explode-true=false
       ((cdr
          (decides⁼→strong-decides⁼
            ⊤
 	    (λ (_ _) true)
 	    (λ (_)
 	       (cons
 	         (λ (_) (same true))
 	         (λ (_) (same sole))))
            (cons sole sole)))
         (λ (_) absurd)))))
#+end_src

Finally, having a strong decider is not quite stronger than having a
decider in the minimal fragment, but it is in when taken in addition
with deciable equality.

#+begin_src
(claim dec⁼→strong-decider⁼→decider⁼
  (Π ((A U))
     (→ (Dec⁼ A)
        (Strong-Decider⁼ A)
        (Decider⁼ A))))
(define dec⁼→strong-decider⁼→decider⁼
  (λ (A dec⁼ strong-decider⁼)
     (cons
       (car strong-decider⁼)
       (λ (p)
         (cons
           (car ((cdr strong-decider⁼) p))
           (λ (fxy=true)
              (ind-Either
	        (dec⁼ p)
	        (λ (_) (= A (car p) (cdr p)))
	        (λ (x=y) x=y)
	        (λ (x≠y)
	           (explode-true=false
	             (trans
		       ; true = f (car p) (cdr p)
		       (symm fxy=true)
		       ; f (car p) (cdr p) = false
		       ((cdr ((cdr strong-decider⁼) p)) x≠y))
		     (= A (car p) (cdr p)))))))))))
#+end_src
This implies that having a strong decider is strictly stronger than
having a decider in the /paraconsistent/ variant of Pie (i.e., with
excluded middle and without explosion).

* Concluding Remarks

Despite the convoluted nature of this story, the ending is simple: in
minimal Pie, if a type 𝐴 has a strong equality decider, then it has
distinguishable unequals.

#+begin_src
(claim strong-decider⁼→≠→◇
  (Π ((A U)
      (strong-decider⁼ (Strong-Decider⁼ A))
      (x A)
      (y A))
     (→ (≠ A x y) (◇ A x y))))
(define strong-decider⁼→≠→◇
  (λ (A strong-decider⁼ x y x≠y)
     (cons
       ((car strong-decider⁼) x)
       (cons
         ((car ((cdr strong-decider⁼) (cons x x))) (same x))
	 ((cdr ((cdr strong-decider⁼) (cons x y))) x≠y)))))
#+end_src

This is certainly one of those cases where the journey is worth more
than the destination.  The final definition seems /right/, in the
sense that the proof uses the data its given exactly as you would
expect.  But the value of this exercise comes from recognizing that
strong deciders are tightly connectioned with decidable equality.  And
this connection illuminates a nuanced heirarchy of possible
definitions of decidable equality which aren't visible in vanilla
Pie.

The last thing perhaps worth pointing out is one final definition:

#+begin_src
(claim Very-Strong-Decides
  (Π ((A U)
      (f (→ A Bool))
      (P (→ A U)))
     U))
(define Very-Strong-Decides
  (λ (A f P)
     (Π ((x A))
        (∧ (↔ (P x) (= Bool (f x) true))
	   (↔ (¬ (P x)) (= Bool (f x) false))))))
#+end_src

If you're at being conscious of explosions, this seems to be the a
reasonably conservative definition which which yields an equivalent
definition of decidable equality in vanilla Pie.  The only curiosity
of this definition is that, in terms of what is /necessary/, there's
no need for f(x) = false to imply ¬P(x).
